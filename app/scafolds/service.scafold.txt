package services

import (
	"github.com/mohsenMj/go-starter-kit/app/models"
	"github.com/mohsenMj/go-starter-kit/app/repositories"
	"github.com/mohsenMj/go-starter-kit/app/responses"
)

type $ModelService interface {
	$ModelCreate($model *models.$Model)
	$ModelUpdate($model *models.$Model)
	$ModelDelete(id string)
	$ModelAll() []models.$Model
	$ModelGet(id string) models.$Model
	$ModelResponse($model models.$Model) responses.$ModelResponse
	$ModelResponses($models []models.$Model) []responses.$ModelResponse
}

type $modelService struct {
	rep repositories.$ModelRepository
}

func New$ModelService(rep repositories.$ModelRepository) $ModelService {
	return &$modelService{
		rep: rep,
	}
}

func (s *$modelService) $ModelCreate($model *models.$Model) {
	s.rep.$ModelCreate($model)
}

func (s *$modelService) $ModelUpdate($model *models.$Model) {
	s.rep.$ModelUpdate($model)
}

func (s *$modelService) $ModelAll() []models.$Model {
	$models := s.rep.$ModelAll()
	return $models
}

func (s *$modelService) $ModelGet(id string) models.$Model {
	var $model models.$Model
	$model = s.rep.$ModelGet(id)
	return models.$Model{
		ID:    $model.ID,
		Title: $model.Title,
		Body:  $model.Body,
	}
}

func (s *$modelService) $ModelDelete(id string) {
	s.rep.$ModelDelete(id)
}

func (s *$modelService) $ModelResponse($model models.$Model) responses.$ModelResponse {
	return responses.$ModelResponse{
		ID:    $model.ID,
		Title: $model.Title,
		Body:  $model.Body,
	}
}

func (s *$modelService) $ModelResponses($models []models.$Model) []responses.$ModelResponse {
	var response []responses.$ModelResponse
	for _, $model := range $models {
		response = append(response, s.$ModelResponse($model))
	}
	return response
}
