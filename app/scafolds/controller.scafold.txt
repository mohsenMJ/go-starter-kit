package controllers

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/mohsenMj/go-starter-kit/app/initializers/database"
	"github.com/mohsenMj/go-starter-kit/app/models"
	"github.com/mohsenMj/go-starter-kit/app/repositories"
	"github.com/mohsenMj/go-starter-kit/app/requests"
	"github.com/mohsenMj/go-starter-kit/app/services"
)

type $ModelController interface {
	$ModelIndex(ctx *gin.Context)
	$ModelShow(ctx *gin.Context)
	$ModelCreate(ctx *gin.Context)
	$ModelUpdate(ctx *gin.Context)
	$ModelDelete(ctx *gin.Context)
}

type $modelController struct {
	service services.$ModelService
}

func New$ModelController() $ModelController {
	service := services.New$ModelService(repositories.New$ModelRepository(database.DB))
	return &$modelController{
		service: service,
	}
}
func (c *$modelController) $ModelIndex(ctx *gin.Context) {
	ctx.JSON(http.StatusOK, c.service.$ModelResponses(c.service.$ModelAll()))
}

func (c *$modelController) $ModelShow(ctx *gin.Context) {
	$model := c.service.$ModelGet(ctx.Param("id"))
	if $model.ID == 0 {
		ctx.JSON(http.StatusNotFound, gin.H{
			"message": "Object Not found",
		})
		return
	}
	ctx.JSON(http.StatusOK, c.service.$ModelResponse($model))
}

func (c *$modelController) $ModelCreate(ctx *gin.Context) {
	var reqeust requests.$ModelCreateRequest
	if err := ctx.ShouldBindJSON(&reqeust); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	$model := models.$Model{Title: reqeust.Title}
	c.service.$ModelCreate(&$model)
	ctx.JSON(http.StatusOK, c.service.$ModelResponse($model))
}

func (c *$modelController) $ModelUpdate(ctx *gin.Context) {
	var input requests.$ModelUpdateRequest
	if err := ctx.ShouldBindJSON(&input); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	$model := c.service.$ModelGet(ctx.Param("id"))
	$model.Title = input.Title
	c.service.$ModelUpdate(&$model)
	ctx.JSON(http.StatusOK, c.service.$ModelResponse($model))
}

func (c *$modelController) $ModelDelete(ctx *gin.Context) {
	$model := c.service.$ModelGet(ctx.Param("id"))
	if $model.ID == 0 {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Model not found"})
		return
	}
	c.service.$ModelDelete(ctx.Param("id"))
	ctx.Status(http.StatusOK)
}
